///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ELF_HEADER;
    
  - bibliography:= "http://www.lisaac.org";
  - author      := "Sonntag Benoit (benoit.sonntag@lisaac.org)";
  - comment     := "ELF Header Mapping";
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;
  
Section Mapping
  
  + ident_0:UINTEGER_32;
  + class  :UINTEGER_8;
  + data   :UINTEGER_8;
  + ver    :UINTEGER_8;
  + pad_0  :UINTEGER_8;
  + pad_1  :UINTEGER_32;
  + pad_2  :UINTEGER_16;
  + pad_3  :UINTEGER_8;
  + nident :UINTEGER_8;
  
  + type   :UINTEGER_16;
  + machine:UINTEGER_16;
  + version:UINTEGER_32;
  
  + entry  :UINTEGER_32;
  
  + ph_off :UINTEGER_32;
  + sh_off :UINTEGER_32;
  
  + flags  :UINTEGER_32;  
  + size   :UINTEGER_16;
  
  + ph_entsize:UINTEGER_16;
  + ph_num :UINTEGER_16;
  + sh_entsize:UINTEGER_16;
  + sh_num :UINTEGER_16;
  + sh_strndx:UINTEGER_16;
  
Section Public
  
  - display <-
  ( + ident:NATIVE_ARRAY(CHARACTER);
    
    "ELF HEADER\n".print; 
    
    // Ident.
    ident := NATIVE_ARRAY(CHARACTER).force_conversion self;
    "  Ident \t: ".print; 
    0.to 3 do { j:INTEGER; ident.item j.print; };
    class
    .when 0 then { ", Invalid class, ".print;  }
    .when 1 then { ", 32-bit, ".print; }
    .when 2 then { ", 64-bit, ".print; };
    data
    .when 0 then { "Invalid data encoding, ".print; }
    .when 1 then { "Intel data encoding, ".print;        }
    .when 2 then { "Motorola data encoding, ".print;        };
    "Ver. ".print;
    ver.print;
    ", size=".print;
    nident.print;
    ".\n".print;
    
    // Type.
    "  Type \t\t: ".print;
    type
    .when 0 then { "No file type.\n".print;       }
    .when 1 then { "Relocatable file.\n".print;   }
    .when 2 then { "Executable file.\n".print;    }
    .when 3 then { "Shared object file.\n".print; }
    .when 4 then { "Core file.\n".print;          }
    .when 0FF00h or 0FFFFh then { "Processor-specific.\n".print; };
    
    // Machine.
    "  Machine \t: ".print;
    machine
    .when 0  then { "No machine.\n".print;                    }
    .when 1  then { "AT&T WE 32100.\n".print;                 }
    .when 2  then { "SPARC.\n".print;                         }
    .when 3  then { "Intel Architecture.\n".print;            }
    .when 4  then { "Motorola 68000.\n".print;                }
    .when 5  then { "Motorola 88000.\n".print;                }
    .when 6  then { "6 (?).\n".print;                         }    
    .when 7  then { "Intel 80860.\n".print;                   }
    .when 8  then { "MIPS RS3000 Big-Endian.\n".print;        }
    .when 9  then { "8 (?).\n".print;                         }
    .when 10 then { "MIPS RS4000 Big-Endian.\n".print;        }
    .when 11 to 16 then { "Reserved for future use.\n".print; }
    .when 17 to 39 then { machine.print; " (?).\n".print;     }
    .when 40 then { "ARM/Thumb Architecture.\n".print;        }
    .when 41 to 0FFFFh then { machine.print; " (?).\n".print; };
  
    // Version.
    "  Version \t: ".print; 
    (version = 0).if {
      "Invalid version.\n".print;
    } else {
      "Current version.\n".print;
    };
    
    // Entry.
    "  Entry \t\t\t\t: ".print;
    entry.to_hexadecimal.print;
    "h.\n".print;
    
    // ph_off.
    "  Program header table's file offset \t: ".print;
    ph_off.to_hexadecimal.print;
    "h.\n".print;

    // sh_off.
    "  Section header table's file offset \t: ".print;
    sh_off.to_hexadecimal.print;
    "h.\n".print;
    
    // Flags.
    "  Flags \t\t\t\t: ".print;
    flags.to_hexadecimal.print;
    "h.\n".print;
    //.when 
    
    // Size.
    "  ELF header's size \t\t\t: ".print;
    size.print;
    " bytes.\n".print;
    
    // Ph_entsize.
    "  Program header table size \t\t: ".print;
    ph_entsize.print;
    " bytes.\n".print;
    
    // Ph_num.
    "  Number of program header table \t: ".print;
    ph_num.print;
    ".\n".print;
    
    // Sh_entsize.
    "  Section header table size \t\t: ".print;
    sh_entsize.print;
    " bytes.\n".print;
    
    // Sh_num.
    "  Number of section header table \t: ".print;
    sh_num.print;
    ".\n".print;
    
    // Sh_strndx.
    "  String table index \t\t\t: ".print;
    sh_strndx.to_hexadecimal.print;
    "h.\n".print;
  );
