///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name    := IDE_CONTROLER;
  
  
  - bibliography:= "http://www.lisaac.org";
  - author      := "Sonntag Benoit (benoit.sonntag@lisaac.org)";
  - comment     := "IDE Controler.";
  
  - date    := "2003/04";
  
Section Inherit
  
  + parent_controler:Expanded CONTROLER;
  
Section Public  
  
  //
  // Read Drive status.
  //
  
  - read_status <-
  (     
    wait_controler;    
    SYSTEM.putb n_drive to (port_base | 6h); // Select a drive
    send_cmd 0ECh; // Informations on drive
    wait_data;
    SYSTEM.itemw port_base;
    nbr_cylinder := SYSTEM.itemw port_base;    
    SYSTEM.itemw port_base;    
    nbr_head := SYSTEM.itemw port_base;
    SYSTEM.itemw port_base;
    SYSTEM.itemw port_base;    
    nbr_sector := SYSTEM.itemw port_base;
    0.to 248 do { j:INTEGER;  // 256 - 7
      SYSTEM.itemw port_base;
    };
  );
  
  //
  // Read / Write.
  //  
  
  - read dest:FAST_ARRAY(UINTEGER_8) size s:INTEGER :UINTEGER_32<-
  ( + size,nb_sec:UINTEGER_32;
    + value:UINTEGER_16;    
    ? {dest!=NULL};
 //   ? {dest.valid_stream (step * s.to_uinteger)}; 
    ? { s > 0 };
    /*
    "Ide_Controler : \tSector #".print;
    cursor.to_hexadecimal.print;
    " size #".print;
    s.to_integer.print;
    '\n'.print;
    */
    nb_sec := s;
    {
      size := nb_sec.min 128;  
      wait_controler;      
      set_cursor_and_size size;
      send_cmd 20h;    // read cmd (or 21h, 22h, 23h)
      1.to size do { i:INTEGER;
	wait_data;
	0.to 255 do { j:INTEGER;
	  value := SYSTEM.itemw port_base;
	  dest.add_last ((value & 0FFh).to_uinteger_8);	  
	  dest.add_last ((value >>   8).to_uinteger_8);	  
	};	
      };
      cursor := cursor + size;
      nb_sec := nb_sec - size;
    }.do_until {nb_sec = 0};
    
    s
  );
  
  - write src:FAST_ARRAY(UINTEGER_8) size s:INTEGER :UINTEGER_32<-
  ( //+ size,nb_sec:UINTEGER_32;
    //+ idx:UINTEGER_32;
    ? {src != NULL};
    ? {! is_read_only};
    ? {s > 0};
    /* // Pour ne pas faire de betise....
    nb_sec := s;
    {
      size := nb_sec.min 128;            
      wait_controller;
      set_cursor_and_size size;
      send_cmd 60;    // write cmd (or 202,203)
      1.to size do { i:INTEGER;
	wait_data;
	0.to 255 do { j:INTEGER;
	  value := src.item (idx+1);	  
	  value := (value << 8) | src.item idx;	 
	  SYSTEM.putw value to port_base;
	  idx := idx + 2;	  
	};
      };
      cursor := cursor + size;
      nb_sec := nb_sec - size;
    }.do_until {nb_sec = 0};
    */    
    s
  );
  
Section Private

  - set_head h:UINTEGER_8 track t:UINTEGER_16 sector s:UINTEGER_8 size sz:INTEGER <-
  // Select a drive / head / track / sector
  ( ? {sz < 256};
    ? {nbr_head >= h};
    ? {nbr_cylinder >= t}; 
    ? {nbr_sector >= s};
    
    SYSTEM.putb (sz.to_uinteger_8) to (port_base | 2h);
    SYSTEM.putb s to (port_base | 3h);
    SYSTEM.putb ((t & 0FFh).to_uinteger_8) to (port_base | 4h);  // low track
    SYSTEM.putb ((t >> 8  ).to_uinteger_8) to (port_base | 5h);  // high track
    SYSTEM.putb (n_drive | h) to (port_base | 6h);              // drive/head
  );
  
  //
  // Intern Sub Routine.
  //
  
  - wait_controler <-
  // Wait for the IDE controler
  (    
    { 
      (SYSTEM.itemb (port_base | 007h) != 50h) && 
      {SYSTEM.itemb (port_base | 007h) != 51h}
    }.while_do { };
  );
  
  - wait_data <-
  // Wait for data
  (
    {SYSTEM.itemb (port_base | 007h) != 58h}.while_do { };
  );
  
  - send_cmd c:UINTEGER_8 <-
  // Wait for the IDE controler
  (
    SYSTEM.putb c to (port_base | 007h);
  );
  


