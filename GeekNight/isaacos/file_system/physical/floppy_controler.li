///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header

  + name    := FLOPPY_CONTROLER;
  
  - bibliography:= "http://www.lisaac.org";
  - author      := "Boutet Jerome (pisteur@free.fr),Sonntag Benoit (benoit.sonntag@lisaac.org)";
  - comment     := "Floppy Disk Controler.";
  
  - date    := "2003/05";
  
Section Inherit
  
  + parent_controler:Expanded CONTROLER;
  
Section Public

  - is_removable:BOOLEAN := TRUE;
  
  //
  // Read Status.
  //  
  
  - read_status <-
  ( + boot:BOOT;
        
    REGISTER.set_ax 0201h;   // Read first sector.
    REGISTER.set_cx 1;
    REGISTER.set_dx n_drive;
    REGISTER.set_es (BIOS.segment_buffer);
    REGISTER.set_bx (BIOS.offset_buffer);
    BIOS.call_interrupt 013h;
    
    boot := CONVERT(NATIVE_ARRAY(UINTEGER_8),BOOT).on (BIOS.buffer);
    
    // Read datas
    nbr_head     := boot.nb_head;  
    nbr_sector   := boot.sectors_per_track;
    nbr_cylinder := boot.nb_sectors.to_uinteger_32/ (nbr_head * nbr_sector);
  );
  
  //
  // Read / Write.
  //

  - read dest:FAST_ARRAY(UINTEGER_8) size s:INTEGER :UINTEGER_32<-
  ( + byte:UINTEGER_8;    
    ? {dest!=NULL};
    ? {dest.valid_stream (s*step)}; 
    ? { s > 0 };
    
    1.to s do { n:INTEGER;
      // Read sector via Bios. 
      set_cursor_and_size 1;
      REGISTER.set_ah 02h;
      BIOS.call_interrupt 013h;
      0.to 511 do { i:UINTEGER_32;
	byte := BIOS.buffer.item i;
	dest.add_last byte;
      };      
      cursor := cursor + 1;
    };
        
    s
  );

  - write src:FAST_ARRAY(UINTEGER_8) size s:INTEGER :UINTEGER_32<-
  ( + idx:UINTEGER_32;
    ? {src != NULL};
    ? {! is_read_only};
    ? { s > 0 };
    ? {start + s <= (src.count)};
    ? {src.valid_stream (s*step)};
    
    1.to s do { n:UINTEGER_32;
      0.to 511 do { i:UINTEGER_32;
	BIOS.buffer.put (src.item idx) to i;
	idx := idx + 1;
      };
      set_cursor_and_size 1;
      REGISTER.set_ah 03h;
      BIOS.call_interrupt 013h;
      cursor := cursor + 1;
    };
    
    s
  );

Section Private
  
  - set_head h:UINTEGER_8 track t:UINTEGER_16 sector s:UINTEGER_8 size sz:INTEGER <-
  (         
    ? {sz = 1};
    REGISTER.set_al sz;
    REGISTER.set_cx (((t & 0FFh)<<8) | ((t >> 2) & 00C0h) | s);
    REGISTER.set_dx ((h.to_uinteger_16 << 8) | n_drive);
    REGISTER.set_es (BIOS.segment_buffer);
    REGISTER.set_bx (BIOS.offset_buffer);
  );

