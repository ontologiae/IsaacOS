///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name        := STD_FILE_EXT2;
  
  - bibliography:= "http://www.lisaac.org";

  - author      := "Simon Fuhlhaber / Jerome Hilbert";  

  - comment     := "Standard File for EXT2";
  
Section Inherit
  
  + parent_entry_ext2:Expanded ENTRY_EXT2;
  + parent_file:Expanded STD_FILE;
  
Section Public
    
  - is_open:BOOLEAN <- (no_inode!=0);
  
  + cursor:UINTEGER_32;
  
  - set_cursor n:UINTEGER_32 <-
  (
    cursor := n;
  );
  
  - size:UINTEGER_32 <- (inode.get_size);
  
  - open:BOOLEAN <-
  (
 //   make_inode;
    TRUE
  );
  
  - open_read_only:BOOLEAN <- open;
  
  - close <-
  (
    cursor := 0;
  );
  
Section STD_FILE
  
  - physical_read buf:NATIVE_ARRAY(UINTEGER_8) size s:INTEGER :INTEGER <-
  (
    + n,lower,upper,current_block,idx:UINTEGER_32;
    + partition:PARTITION_EXT2;
    
    partition ?= FILE_SYSTEM.get_partition Self;
    current_block:=cursor/partition.block_size;
    (cursor+s>size).if{
      n:=size-cursor;
    }else{
      n:=s;
    };
    lower:=cursor%partition.block_size;
    idx:=0;
    {n=0}.until_do{
      current_block:=current_block+1;
      partition.set_block_type current_block;
      partition.set_block (inode.get_block current_block);
      partition.read;
      ((lower+n)<(partition.block_size)).if{
        upper:=lower+n-1;
      }else{
        upper:=partition.block_size-1;
      };
      lower.to upper do { i:INTEGER;
        buf.put (partition.buffer.item i) to idx;
        idx:=idx+1;
      };
      n:=n-(upper-lower+1);
      lower:=0;
    };
    idx.to_integer
  );
  
  
  - physical_write buf:NATIVE_ARRAY(UINTEGER_8) size s:INTEGER :INTEGER <-
  (
    + n,lower,upper,current_block,idx:UINTEGER_32;
    + partition:PARTITION_EXT2;
    
    partition ?= FILE_SYSTEM.get_partition Self;
    
    current_block:=cursor/partition.block_size;
    (cursor+s>size).if{
      n:=size-cursor;
    }else{
      n:=s;
    };
    lower:=cursor%partition.block_size;
    idx:=0;
    {n=0}.until_do{
      
      ((lower+n)<(partition.block_size)).if{
        upper:=lower+n-1;
      }else{
        upper:=partition.block_size-1;
      };
      lower.to upper do { i:INTEGER;
        partition.buffer.put (buf.item idx) to i;
        idx:=idx+1;
      };
      n:=n-(upper-lower+1);
      lower:=0;
      
      current_block:=current_block+1;
      partition.set_block_type current_block;
      partition.set_block (inode.get_block current_block);
      partition.write;
    };
    idx.to_integer
  );
