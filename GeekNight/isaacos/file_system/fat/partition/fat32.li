///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name        := FAT32;
  
  - bibliography:= "http://www.lisaac.org";

  - author      := "Benoit Sonntag (benoit.sonntag@lisaac.org), Jerome Boutet (pisteur@free.fr)";  

  - comment     := "File system type: FAT 32";
  
Section Inherit
  
  + parent_fat:Expanded FAT;

Section Private

  + fs_info_sector:UINTEGER_32; // A voir plus tards... 
  
  - null_value:UINTEGER_32:= 0FFFFFF8h;

  - sector:UINTEGER_32<-
  (
    block_offset + cluster * step
  );
  
Section Public
  
  - next_cluster:BOOLEAN <-  
  ( + fat32:NATIVE_ARRAY(UINTEGER_32);  
    + sec_fat,n:UINTEGER_32;
       
    // Virtual Root cluster :
    //(cluster >= root_block).if {
    //  cluster := cluster + 1;
    //} else {
      sec_fat := (fat_sector + (cluster >> 7)) & 0FFFFFFF8h;      
      n := (((fat_sector << 9) + (cluster << 2)) & 4095) >> 2;
      (sec_fat != fat_cache_index).if {      
	drive.set_cursor sec_fat;
	fat_cache.clear;
	drive.read fat_cache size 8;	
	fat_cache_index := sec_fat;
      };      
      fat32 := CONVERT(NATIVE_ARRAY(UINTEGER_8),NATIVE_ARRAY(UINTEGER_32)).on (fat_cache.to_native_array);
      cluster := fat32.item n;
      //};    
            
    cluster < null_value
  );
  
  //
  // Creation.
  //
  
  - make drv:DRIVE begin fsector:UINTEGER_32<-
  ( + boot:BOOT;
    
    drive := drv;
    first_sector := fsector;
    buffer := FAST_ARRAY(UINTEGER_8).create_with_capacity 512;
    
    drive.set_cursor first_sector;    
    drive.read buffer size 1;    
    boot := CONVERT(NATIVE_ARRAY(UINTEGER_8),BOOT).on (buffer.to_native_array);
        
    // Compute Size Cluster :
    step := boot.sectors_per_cluster;
        
    // Compute Logical Sector FAT :
    fat_sector := first_sector + boot.sectors_reserved;
    fat_number := boot.nb_fat;
    fat_size   := boot.sectors_per_fat32;
    fat_cache  := FAST_ARRAY(UINTEGER_8).create_with_capacity 4096;

    // Compute Logical Sector Root :
    root_block := boot.cluster_start_root;
    
    // Compute Sector First Cluster : (-2 Cluster)   
    block_offset := fat_sector + fat_size*fat_number - (step << 1); 
            
    // Buffer for one cluster.
    buffer.set_capacity (step_byte.to_integer);
    // Read File System Information :
    //fs_info_sector := first_sector + BOOT.fs_info_sector;
    //drive.set_cursor fs_info_sector;
    //drive.read buf size 1;
    //free_cluster := 
    //( buf.item 488).to_uinteger_32   | 
    //((buf.item 489).to_uinteger<<8)  |
    //((buf.item 490).to_uinteger<<16) |
    //((buf.item 491).to_uinteger<<24);
  );


