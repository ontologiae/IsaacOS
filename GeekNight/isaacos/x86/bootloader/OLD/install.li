///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := INSTALL;
  
  
  - bibliography := "http://www.lisaac.org";
  - author       := "Sonntag Benoit (benoit.sonntag@lisaac.org)";
  - comment      := "Isaac Install for x86 architecture.";
  
  - external := `#include <bios.h>`;
  
Section Inherit   
  
  - parent_object:OBJECT := OBJECT;
  
Section Private  
  //
  // Independance File System 
  //
  
  - open_read n:ABSTRACT_STRING :POINTER <- 
  ( + buf:NATIVE_ARRAY(CHARACTER);
    string_tmp.copy n;
    buf := string_tmp.to_external;
    `fopen((char*)@buf,"rb")`:(POINTER)
  );

  - open_write n:ABSTRACT_STRING :POINTER <- 
  ( + buf:NATIVE_ARRAY(CHARACTER);
    string_tmp.copy n;
    buf := string_tmp.to_external;
    `fopen((char*)@buf,"wb")`:(POINTER)
  );
  
  - read f:POINTER in buf:FAST_ARRAY(UINTEGER_8) size sz:INTEGER :INTEGER <-   
  ( + ptr:NATIVE_ARRAY(UINTEGER_8);
    + result:INTEGER;
    ptr := buf.storage;    
    result := `fread((void *)(@ptr),(size_t)(1), (size_t)(@sz),(FILE*)(@f))`:(INTEGER);
    result
  );
  
  - write f:POINTER with buf:FAST_ARRAY(UINTEGER_8) size sz:INTEGER :INTEGER <-   
  ( + ptr:NATIVE_ARRAY(UINTEGER_8);
    + result:INTEGER;
    ptr := buf.storage; 
    result := `fwrite((void *)(@ptr),(size_t)(1), (size_t)(@sz),(FILE*)(@f))`:(INTEGER);
    result
  );
  
  - close p:POINTER <- `fclose((FILE*)(@p))`;
  
  - file_size p:POINTER :INTEGER <-
  ( + result:INTEGER;
    `fseek((FILE*)(@p),0,SEEK_END)`;
    result := `ftell((FILE *)@p)`:INTEGER;
    `fseek((FILE*)(@p),0,SEEK_SET)`;
    result
  );

  - make_file new_path:STRING :BOOLEAN <-
  ( + p:NATIVE_ARRAY(CHARACTER);
    + stream:POINTER;
    + result:BOOLEAN;
    
    p := new_path.to_external;
    stream := `fopen((char*)@p,"w+b")`:POINTER;
    (result := (stream != NULL)).if {
      close stream; 
    };
    result
  );
  
  //
  // Temp. variable.
  //
  
  - string_tmp:STRING := STRING.create 255;
  
  //
  // Isaac Install Information.
  //
  
  + isaac_drive:UINTEGER_8; // 0x80:Hard Disk   0x00:Floppy Disk.
  
  + isaac_partition:INTEGER;
  
  + isaac_head:UINTEGER_8;
  + isaac_cylinder:UINTEGER_16;
  + isaac_sector:UINTEGER_16;
  + isaac_begin_partition:UINTEGER_32;
  
  //
  // Generic manager.
  //
  
  - buffer :FAST_ARRAY(UINTEGER_8);
  - buffer2:FAST_ARRAY(UINTEGER_8);
  
  - title str:STRING_CONSTANT <-
  (
    "\n* ".print;
    str.print;
    "\n==".print;
    1.to (str.count) do { j:INTEGER;
      '='.print;
    };
    '\n'.print;
  );
  
  - get_choice:BOOLEAN <-
  ( + choice:CHARACTER;
    
    " (Y/N) ? ".print;
    {
      choice:=IO.read_character.to_lower;
    }.do_while {(choice!='n') && {choice!='y'}};
    
    (choice='y')
  );
  
  - choice txt:ABSTRACT_STRING from low:CHARACTER to up:CHARACTER :CHARACTER <-
  ( + choice:CHARACTER;

    txt.print;
    {
      choice:=IO.read_character;
    }.do_until {choice.in_range low to up};
    choice
  );
    
  - display_sector buf:NATIVE_ARRAY(UINTEGER_8) <-
  ( + char:CHARACTER; 
    
    "Display buffer : \n".print;
    0.to 511 do { n:INTEGER;
      char:=buf.item n.to_character;
      (char>=' ').if {
	char.print;
      } else {
	'.'.print;
      };
    };
    '\n'.print;
  );
  
  //
  // Read / Write BIOS
  //
  
  - read_sector (head:UINTEGER_8,cylinder,sector:UINTEGER_16) in buf:FAST_ARRAY(UINTEGER_8) <-
  ( + drive:UINTEGER_8; 
    + storage:NATIVE_ARRAY(UINTEGER_8);
    
    drive   := isaac_drive;
    storage := buf.storage;
    `biosdisk(0x02,@drive,@head,@cylinder,@sector,1,@storage)`:BOOLEAN{TRUE,FALSE}.if {
      crash_with_message "Error read bios disk 13h.\n";
    };
  );

  - write_sector (head:UINTEGER_8,cylinder,sector:UINTEGER_16) with buf:FAST_ARRAY(UINTEGER_8) <-
  ( + drive:UINTEGER_8;
    + storage:NATIVE_ARRAY(UINTEGER_8);
    
    drive   := isaac_drive;
    storage := buf.storage;
    `biosdisk(0x03,@drive,@head,@cylinder,@sector,1,@storage)`:BOOLEAN{TRUE,FALSE}.if {
      crash_with_message "Error write bios disk 13h.\n";
    };
  );
    
  //
  // Partition Info.
  //
  
  + partition_list:LINKED_LIST(MBR);
  
  - sub_read_partition sec:UINTEGER_64 <-
  ( + part:MBR;
    + buf:NATIVE_ARRAY(UINTEGER_8);
    
    INT13H.read buffer sector sec;

    // Load partition.
    1BEh.to 1EEh by 16 do { n:INTEGER;
      buf:=buffer.storage;
      part:=`(void *)(&@buf[@n])`:MBR;
      ((part.type = 05h) || {part.type = 0Fh}).if {      
	// Partition Etendue.
	//"Partition Etendu:\n".print;
	//part.print;
	//IO.read_character;
	sub_read_partition (sec+part.mbr_first_sector);
      }.elseif {(part.type != 0) && {part.type != 0FFh}} then {
	// New Partition.
	part.add_base (sec.to_uinteger);
	partition_list.add_last (part.clone);
      };
    };
  );
    
  - choice_partition <-
  ( + part:MBR;
    
    partition_list:=LINKED_LIST(MBR).create;
    sub_read_partition 0;
  
    (partition_list.lower).to (partition_list.upper) do { n:INTEGER;
      "Partition #".print;
      n.print;
      ": ".print;
      partition_list.item n.print_small;
    };
    
    isaac_partition := choice "Isaac partition ? " from '1' to ((partition_list.upper).decimal_digit) .decimal_value;
    
    "Isaac partition #".print;
    isaac_partition.print;
    
    (! get_choice).if {
      crash_with_message "Stop install !\n";
    };
    
    part:=partition_list.item isaac_partition;
    isaac_head           := part.head_begin;
    isaac_cylinder       := part.cylinder_begin;
    isaac_sector         := part.sector_begin;
    isaac_begin_partition:= part.mbr_first_sector;
  );
  
  //
  // Sector BOOT Manager. 
  // 
 
  - boot_manager <-
  ( + choice:CHARACTER;
    + boot:BOOT;
    + file_w,file_r:POINTER;
    + name:ABSTRACT_STRING;
    + sz:INTEGER;
    
    choice := choice
    "1. Save actual boot in 'bootold.sys'. \n\
    \2. Install new Isaac boot.            \n\
    \3. Restore 'bootold.sys'.             \n\
    \Choice: " from '1' to '3';
    choice
    .when '1' then {
      //
      // Save old Boot.
      //
      (isaac_drive = 80h).if {
	INT13H.read buffer sector isaac_begin_partition;
      } else {
	read_sector (isaac_head,isaac_cylinder,isaac_sector) in buffer;
      };
      // brutforce
      boot := CONVERT(NATIVE_ARRAY(UINTEGER_8),BOOT).on (buffer.storage);  
      boot.display_all;
      // Saving old boot sector.
      (isaac_drive=080h).if {
	name:="C:\\bootold.sys";
      } else {
	name:="A:\\bootold.sys";
      };
      "\nThe old boot sector is saving in `bootold.sys' file.\n\
      \WARNING : Not remove this file, please !\n".print;
      "\nSave this boot in `".print;
      name.print; 
      "' file".print;
      (get_choice).if {
	"Writting...\n".print;
	file_w := open_write name;
	(file_w = NULL).if {
	  string_tmp.copy "Error : Not open file `";
	  string_tmp.append name;
	  string_tmp.append "'.\n";
	  crash_with_message string_tmp; 
	};
	sz := write file_w with buffer size 512;
	(sz != 512).if {
	  string_tmp.copy "Error : Write `";
	  sz.append_in string_tmp;
	  string_tmp.append " bytes only !\n";
	  crash_with_message string_tmp;
	};
	close file_w;
      };
    }
    .when '2' then {
      //
      // Isaac Install Boot.
      //
      (isaac_drive=080h).if {
	INT13H.read buffer sector isaac_begin_partition;
      } else {
	read_sector (isaac_head,isaac_cylinder,isaac_sector) in buffer;
      };
      file_r := open_read "boot.com";
      (file_r = NULL).if {
	crash_with_message "Error : file `boot.com' not found.\n";
      };
            
      buffer2.clear;
      {buffer2.count < 512}.while_do { buffer2.add_last 0; };
      read file_r in buffer2 size (file_size file_r);
      close file_r;
      
      // Copy old_boot -> new_boot.
      3.to 89 do { j:INTEGER;
	buffer2.put (buffer.item j) to j;
      };
      // Write Boot signature. 
      buffer2.put 055h to 510;
      buffer2.put 0AAh to 511;
          
      // Calcul isaac data.
      boot:= CONVERT(NATIVE_ARRAY(UINTEGER_8),BOOT).on (buffer2.storage);  
      boot.put_isaac_data isaac_begin_partition drive isaac_drive;
      
      "New boot Isaac :\n".print;
      boot.display_all;
      
      // Write new Boot.
      "Write new boot Isaac ".print;
      (get_choice).if {
	"Writting...\n".print;
	(isaac_drive=080h).if {
	  INT13H.write buffer2 sector isaac_begin_partition;
	} else {
	  write_sector (isaac_head,isaac_cylinder,isaac_sector) with buffer2;
	};
      } else {
	crash_with_message "Stop install !\n";      
      };
    }
    .when '3' then {
      //
      // Install Old Boot.
      //
      file_r := open_read "bootold.sys";
      (file_r = NULL).if {
	string_tmp.copy "Error : file `";
	string_tmp.append name;
	string_tmp.append "' not found.\n";
	crash_with_message string_tmp;
      };
      buffer2.clear;
      {buffer2.count < 512}.while_do { buffer2.add_last 0; };      
      read file_r in buffer2 size 512;
      close file_r;
                  
      // Write new Boot.
      "Write old boot ".print;
      (get_choice).if {
	"Writting...\n".print;
	(isaac_drive=080h).if {
	  INT13H.write buffer2 sector isaac_begin_partition;
	} else {
	  write_sector (isaac_head,isaac_cylinder,isaac_sector) with buffer2;
	};
      } else {
	crash_with_message "Stop install !\n";      
      };
    };
    
  );
       
Section Public

  - main <-
  ( + choice:CHARACTER;
    
    buffer :=FAST_ARRAY(UINTEGER_8).create 512;
    buffer2:=FAST_ARRAY(UINTEGER_8).create 512;
    
    "\t\t=====================================\n\
    \\t\t= Isaac install for x86 (01/2006) =\n\
    \\t\t=====================================\n\n".print;
    
   /* title "Choice drive.";
    choice := choice 
    "1. Hard Disk.\n\
    \2. Floppy Disk.\n\
    \Choice: " from '1' to '2';*/
    choice='1';
    
    (choice='1').if {
      title "Partition manager.";
      isaac_drive:=80h;
      choice_partition;
    } else {
      isaac_drive:=00h;
      isaac_head:=0;
      isaac_cylinder:=0;
      isaac_sector:=1;
      isaac_begin_partition:=0;
    };

    title "Boot manager.";
    boot_manager;
    
    "Success installation !\n".print;    
  );






