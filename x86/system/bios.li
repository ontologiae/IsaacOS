///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name        := BIOS;
  
  - bibliography:= "http://www.lisaac.org";
  - author      := "Boutet Jerome (pisteur@free.fr),Sonntag Benoit (benoit.sonntag@lisaac.org)";
  - comment     := "Bios service (IBM PC).";
  
Section Private  
  
  // 2Kb Stack.
  - stack:NATIVE_ARRAY(UINTEGER_16) := CONVERT(INTEGER,NATIVE_ARRAY(UINTEGER_16)).on 1800h; //580h; 
  
  - top_stack:INTEGER := 400h; // x 2 => 800h => 2Kb.
  
  - push val:UINTEGER_16 <-
  (
    ? {top_stack != 0};
    top_stack := top_stack - 1;
    stack.put val to top_stack;
  );
  
  - pop:UINTEGER_16 <-
  ( + result:UINTEGER_16;
    ? {top_stack != 400h};
    
    result:=stack.item top_stack;
    top_stack := top_stack + 1;
    
    result
  );
  
  - push_all <-
  (
    push (REGISTER.ax);
    push (REGISTER.cx);
    push (REGISTER.dx);
    push (REGISTER.bx);
    push 0; // SP
    push (REGISTER.bp);
    push (REGISTER.si);
    push (REGISTER.di);    
  );

  - pop_all <-
  (
    REGISTER.set_di pop;
    REGISTER.set_si pop;
    REGISTER.set_bp pop;
    pop; // SP
    REGISTER.set_bx pop;
    REGISTER.set_dx pop;
    REGISTER.set_cx pop;
    REGISTER.set_ax pop;
  );
    
Section Public

  - call_interrupt num:UINTEGER_8 :BOOLEAN <-
  ( + old_idtr:UINTEGER_32;
    + old_irq0,old_irq1:UINTEGER_8;
    + mem:VIRTUAL_MEMORY;

    // Saving the registers in the stack 16
    push_all;
    push (REGISTER.es);
    push (REGISTER.ds);
    push (REGISTER.flags);
    push num; // Save Int N
    
    // Modify the idtr register (interrupt table address) :
    old_idtr:=SYSTEM.idtr;
    SYSTEM.interrupt_off;
    SYSTEM.set_idtr 0 limit 3FFh;
    
    // Configure PICs for DOS/BIOS :
    old_irq0 := SYSTEM.itemb 21h; // Save IRQs.
    old_irq1 := SYSTEM.itemb 0A1h;
    SYSTEM.putb 11h to 20h;  // ICW1 : Mode attaque / Cascade / ICW4
    SYSTEM.putb 11h to 0A0h;
    SYSTEM.putb 08h to 21h;  // ICW2 : N  int Pr IRQ0
    SYSTEM.putb 70h to 0A1h;
    SYSTEM.putb 04h to 21h;  // ICW3 : Ligne IRQ Pr Esclave (2nd PIC)
    SYSTEM.putb 02h to 0A1h;
    SYSTEM.putb 01h to 21h;  // ICW4 : EOI Manuel / Intel
    SYSTEM.putb 01h to 0A1h;
    SYSTEM.putb 00h to 21h;  // Autorise Tout pr IRQ0-7
    SYSTEM.putb 9Eh to 0A1h; // Autorise DD,Math,Clock pr IRQ8-15

    // Call Far 08h:[1000h]
    `
    asm("                       \n\
      .byte 0x9A		\n\
      .long 0x1000		\n\
      .word 0x08		\n": /* no output */ : /* no input */ : "memory"); 
    `;
    
    // Configure PICs for ISAAC :
    SYSTEM.putb 11h to 20h;  // ICW1 : Mode attaque / Cascade / ICW4
    SYSTEM.putb 11h to 0A0h;
    SYSTEM.putb 20h to 21h;  // ICW2 : N int Pr IRQ0
    SYSTEM.putb 28h to 0A1h;
    SYSTEM.putb 04h to 21h;  // ICW3 : Ligne IRQ Pr Esclave (2ï¿½me PIC)
    SYSTEM.putb 02h to 0A1h;
    SYSTEM.putb 01h to 21h;  // ICW4 : EOI Manuel / Intel
    SYSTEM.putb 01h to 0A1h;
    SYSTEM.putb old_irq0 to 21h;
    SYSTEM.putb old_irq1 to 0A1h;

    // Restore old Idtr
    SYSTEM.set_idtr old_idtr limit 7FFh;
    SYSTEM.interrupt_on;
    
    // Restore Regs in the stack 16
    pop; // Int Num.
    REGISTER.set_flags pop;
    REGISTER.set_ds pop;
    REGISTER.set_es pop;
    pop_all;
    
    mem ?= SYSTEM.memory;
    (mem != NULL).if {
      mem.set_pagination;
    };

    (REGISTER.flags & 1) = 0    // FALSE if Error (flags = 1)
  );
//LISAAC2
  - clear_buffer <- launch_clear_buffer ;
  - buffer:NATIVE_ARRAY(UINTEGER_8) <- get_buffer ; 
  - segment_buffer:UINTEGER_16 <- get_segment_buffer;
  - offset_buffer:UINTEGER_16  <- get_offset_buffer;
  - get_address rm_adress:UINTEGER_32 :UINTEGER_32 <- driv_get_address rm_adress; 
Section Public //DRIVER, CONTROLER
  
  //
  // Real Mode Memory
  //
  
  - buffer_size:INTEGER := 800h; // 2Ko
  
  - get_buffer:NATIVE_ARRAY(UINTEGER_8) <- CONVERT(INTEGER,NATIVE_ARRAY(UINTEGER_8)).on 2800h; 
  // Rmq.: VIDEO (Vesa 2.0) use more of 512 bytes.
  
  - launch_clear_buffer <-
  (
    buffer.clear_all (buffer_size - 1);
  );
  
  - get_segment_buffer:UINTEGER_16 := 0280h;
  
  - get_offset_buffer:UINTEGER_16  := 0000h;

  - driv_get_address rm_adress:UINTEGER_32 :UINTEGER_32 <-
  // Real mode adress -> Protecting mode adress.
  (
    ((rm_adress & 0FFFF0000h) >> 12) + (rm_adress & 0FFFFh)
  );



