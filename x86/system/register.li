///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name        := REGISTER;
    
  - bibliography:= "http://www.lisaac.org";
  - author      := "Boutet Jerome (boutet@loria.fr),Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Registers 16 bits.";
    
Section Public
  
  //
  // 16 Bits
  //

  - ax:UINTEGER_16;
  
  - cx:UINTEGER_16;
  
  - dx:UINTEGER_16;
  
  - bx:UINTEGER_16;
  
  - sp:UINTEGER_16;
  
  - bp:UINTEGER_16;
  
  - si:UINTEGER_16;
  
  - di:UINTEGER_16;
  
  - es:UINTEGER_16;
  
  - ds:UINTEGER_16;
  
  - flags:UINTEGER_16;
  
  //  
  // 8 Bits
  //
    
  - al:UINTEGER_8 <- (ax & 0FFh).to_uinteger_8;
  
  - ah:UINTEGER_8 <- (ax >> 8).to_uinteger_8;

  - bl:UINTEGER_8 <- (bx & 0FFh).to_uinteger_8;
  
  - bh:UINTEGER_8 <- (bx >> 8).to_uinteger_8;

  - cl:UINTEGER_8 <- (cx & 0FFh).to_uinteger_8;
  
  - ch:UINTEGER_8 <- (cx >> 8).to_uinteger_8;
  
  - dl:UINTEGER_8 <- (dx & 0FFh).to_uinteger_8;
  
  - dh:UINTEGER_8 <- (dx >> 8).to_uinteger_8;
  
  - carry:BOOLEAN <- (flags & 1b) != 0;
  
  //
  // Modification 16 bits
  //
  
  - set_ax value:UINTEGER_16 <- ( ax := value; );
  
  - set_cx value:UINTEGER_16 <- ( cx := value; );
  
  - set_dx value:UINTEGER_16 <- ( dx := value; );
  
  - set_bx value:UINTEGER_16 <- ( bx := value; );
  
  - set_sp value:UINTEGER_16 <- ( sp := value; );
  
  - set_bp value:UINTEGER_16 <- ( bp := value; );
  
  - set_si value:UINTEGER_16 <- ( si := value; );
  
  - set_di value:UINTEGER_16 <- ( di := value; );
  
  - set_es value:UINTEGER_16 <- ( es := value; );
  
  - set_ds value:UINTEGER_16 <- ( ds := value; );

  - set_flags value:UINTEGER_16 <- ( flags := value; );

  //
  // Modification 8 bits
  //

  - set_al value:UINTEGER_8 <- 
  ( 
    ax := (ax & 0FF00h) | value;
  );
  
  - set_ah value:UINTEGER_8 <-
  (
    ax := (ax & 0FFh) | (value.to_uinteger_16 << 8);
  );

  - set_bl value:UINTEGER_8 <- 
  ( 
    bx := (bx & 0FF00h) | value;
  );
  
  - set_bh value:UINTEGER_8 <-
  (
    bx := (bx & 0FFh) | (value.to_uinteger_16 << 8);
  );
  
  - set_cl value:UINTEGER_8 <- 
  ( 
    cx := (cx & 0FF00h) | value;
  );
  
  - set_ch value:UINTEGER_8 <-
  (
    cx := (cx & 0FFh) | (value.to_uinteger_16 << 8);
  );

  - set_dl value:UINTEGER_8 <- 
  ( 
    dx := (dx & 0FF00h) | value;
  );
  
  - set_dh value:UINTEGER_8 <-
  (
    dx := (dx & 0FFh) | (value.to_uinteger_16 << 8);
  );

  - print <-
  (
    '\n'.print; 'a'.print; 'x'.print; ':'.print;
    MEMORY.print_nbx ax;

    ' '.print; 'b'.print; 'x'.print; ':'.print;
    MEMORY.print_nbx bx;

    ' '.print; 'c'.print; 'x'.print; ':'.print;
    MEMORY.print_nbx cx;

    ' '.print; 'd'.print; 'x'.print; ':'.print;
    MEMORY.print_nbx dx;

    ' '.print; 'b'.print; 'p'.print; ':'.print;
    MEMORY.print_nbx bp;
    
    ' '.print; 's'.print; 'i'.print; ':'.print;
    MEMORY.print_nbx si;
    
    ' '.print; 'd'.print; 'i'.print; ':'.print;
    MEMORY.print_nbx di;
    
    ' '.print; 'd'.print; 's'.print; ':'.print;
    MEMORY.print_nbx ds; 
    
    ' '.print; 'e'.print; 's'.print; ':'.print;
    MEMORY.print_nbx es;
  );
  
  
