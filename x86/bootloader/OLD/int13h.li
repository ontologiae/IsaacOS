///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name        := INT13H;
  

  
  - bibliography:= "http://www.lisaac.org";

  - author      := "Benoit Sonntag (bsonntag@loria.fr), Jerome Boutet (boutet@loria.fr)";  

  - comment     := "Address packet for in13h";
  
  - external :=
`
#include <dos.h>
#include <conio.h>
#include <dpmi.h>
`; 

Section Inherit  
  
  - parent_object:OBJECT := OBJECT;
  
Section Mapping
  
  + packet_size:UINTEGER_8;
  + reserved:UINTEGER_8;
  
  + nb_sector:UINTEGER_16;
  
  + offset_buffer :UINTEGER_16;
  + segment_buffer:UINTEGER_16;
  
  + sector_lba:UINTEGER_64;
  
Section Public
  
  - read buf:FAST_ARRAY(UINTEGER_8) sector sec:UINTEGER_64 :BOOLEAN <-
  ( + buffer_adress:UINTEGER_16;
    + packet_adress:UINTEGER_16;
    + storage:NATIVE_ARRAY(UINTEGER_8);
    + result:UINTEGER_16;
        
    storage := buf.storage;    
    `{
      int (buffer_selector1,buffer_selector2);
      __dpmi_regs registres;`;
      
      buffer_adress := `__dpmi_allocate_dos_memory(32,&buffer_selector1)`:UINTEGER_16; // Alloc DOS 512 bytes
      packet_adress := `__dpmi_allocate_dos_memory( 1,&buffer_selector2)`:UINTEGER_16; // Alloc DOS  16 bytes 
      
      packet_size    := 10h;
      reserved       := 0;
      nb_sector      := 1;
      offset_buffer  := 0;
      segment_buffer := buffer_adress; 
      sector_lba     := sec; 
      
      `dosmemput(@Self,16,@packet_adress*16)`;
      
      `registres.x.ax=0x4200`;
      `registres.x.dx=0x0080`;
      `registres.x.ds=@packet_adress`;
      `registres.x.si=0`;
      `__dpmi_int(0x13,&registres)`;
  
      result := `registres.x.ax`:UINTEGER_16;
            
      `dosmemget(@buffer_adress*16,512,@storage)`;
      
      `__dpmi_free_dos_memory(buffer_selector1)`;
      `__dpmi_free_dos_memory(buffer_selector2)`;
    `}`;
    result = 0
  );
  
  - write buf:FAST_ARRAY(UINTEGER_8) sector sec:UINTEGER_64 :BOOLEAN <-
  ( + buffer_adress:UINTEGER_16;
    + packet_adress:UINTEGER_16;
    + storage:NATIVE_ARRAY(UINTEGER_8);
    + result:UINTEGER_16;
        
    storage := buf.storage;    
    `{
      int (buffer_selector1,buffer_selector2);
      __dpmi_regs registres;`;
      
      buffer_adress := `__dpmi_allocate_dos_memory(32,&buffer_selector1)`:UINTEGER_16; // Alloc DOS 512 bytes
      packet_adress := `__dpmi_allocate_dos_memory( 1,&buffer_selector2)`:UINTEGER_16; // Alloc DOS  16 bytes 
      
      packet_size    := 10h;
      reserved       := 0;
      nb_sector      := 1;
      offset_buffer  := 0;
      segment_buffer := buffer_adress; 
      sector_lba     := sec; 
      
      `dosmemput(@storage,512,@buffer_adress*16)`;
      `dosmemput(@Self,16,@packet_adress*16)`;
      
      `registres.x.ax=0x4300`;
      `registres.x.dx=0x0080`;
      `registres.x.ds=@packet_adress`;
      `registres.x.si=0`;
      `__dpmi_int(0x13,&registres)`;
  
      result := `registres.x.ax`:UINTEGER_16;
            
      //`dosmemget(@buffer_adress*16,512,@storage)`;
      
      `__dpmi_free_dos_memory(buffer_selector1)`;
      `__dpmi_free_dos_memory(buffer_selector2)`;
    `}`;
    result = 0
  );
  


