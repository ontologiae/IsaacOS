///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name    := DRIVE;
  
  
  - bibliography:= "http://www.lisaac.org";
  - author      := "Sonntag Benoit (benoit.sonntag@lisaac.org)";
  - comment     := "Drive Manager";
  
  - date    := "2003/05";
  
Section Inherit
  
  + parent_controler:CONTROLER := CONTROLER;
  
Section DRIVER, FAT12, PARTITION
  
  //
  // Creation.
  //
  
  - drive_create ctrl:CONTROLER drive drv:UINTEGER_8 :SELF <-
  ( + result:SELF;
    
    result := SELF.clone;
    result.make ctrl drive drv
 );
  
  - make ctrl:CONTROLER drive drv:UINTEGER_8 :SELF <-
  ( + result:SELF;
    + new:CACHE_SECTOR;
    parent_controler := ctrl;
    n_drive := drv;
    (read_status).if {
      result := Self;
      cache := HASHED_DICTIONARY(CACHE_SECTOR,UINTEGER_32).create;
      cache.with_capacity 53;
      first := last := CACHE_SECTOR.create;
      1.to 53 do { j:INTEGER;
        new := CACHE_SECTOR.create;
        last.set_next new;
        new.set_previous last;
        last := new;      
      };
    };
    result
  );
    
  //
  // Data.
  //
  
  + cursor:UINTEGER_32;
  
  + n_drive:UINTEGER_8;
  
  + nbr_sector:UINTEGER_32;
  
  + nbr_cylinder:UINTEGER_32;
  
  + nbr_head:UINTEGER_32;

  - step:UINTEGER_32:= 512;
  
Section Private
    
  + cache:HASHED_DICTIONARY(CACHE_SECTOR,UINTEGER_32);
  
  + first:CACHE_SECTOR;
  
  + last:CACHE_SECTOR;
  
  - dest:FAST_ARRAY(UINTEGER_8) :=FAST_ARRAY(UINTEGER_8).clone;

  - flush <-
  ( + sec:CACHE_SECTOR;
    
    sec := first;
    { sec != NULL }.while_do {
      (sec.has_write).if {
        set_cursor (sec.cursor);
        dest.make_with_native_array (sec.buffer) size 512;
        physical_write dest size 1;
      };
      sec := sec.next;
    };
  );
  
  - get_cache cursor:UINTEGER_32 :CACHE_SECTOR <-
  ( + sector:CACHE_SECTOR;

    sector := cache.reference_at cursor;
    (sector = NULL).if {
      (last.has_write).if {
        set_cursor (last.cursor);
        dest.make_with_native_array (last.buffer) size 512;
        physical_write dest size 1;
      };
      (last.cursor != -1).if {
        cache.remove (last.cursor);
      };      
      sector := last;               
      set_cursor cursor;
      dest.make_with_native_array (sector.buffer) size 512;
      dest.clear;
      physical_read dest size 1;
      sector.set_has_write FALSE;
      sector.set_cursor cursor;
      cache.add sector to cursor;
    };
    (first != sector).if {
      (sector = last).if {
        last := sector.previous;
      } else {
        sector.next.set_previous (sector.previous);          
      };
      sector.previous.set_next (sector.next);
      sector.set_next first;
      first.set_previous sector;
      sector.set_previous NULL;
      first := sector;
    };
    sector
  );
 
  
Section Public

  - create ctrl:CONTROLER drive drv:UINTEGER_8 :SELF <- drive_create ctrl drive drv;

  - sector_size:UINTEGER_16 <- 512;

  
  - read dest:FAST_ARRAY(UINTEGER_8) size s:INTEGER :UINTEGER_32<-   
  ( //+ sec:CACHE_SECTOR;
    physical_read dest size s
/*    0.to (s-1) do { j:INTEGER;
      sec := get_cache cursor;      
      0.to 511 do { i:INTEGER;
        dest.add_last (sec.buffer.item i);
      };
    };
    s*/
  );
  
  - write src:FAST_ARRAY(UINTEGER_8) size s:INTEGER :UINTEGER_32<-
  [
//    -? {! is_read_only};
    -? {src != NULL};
  ]
  ( + sec:CACHE_SECTOR;
    + pos:INTEGER;

    0.to (s-1) do { k:INTEGER;
      sec := get_cache cursor;      
      sec.set_has_write TRUE;
      0.to 511 do { i:INTEGER;
        sec.buffer.put (src.item pos) to i;
        pos := pos + 1;
      };
      cursor := cursor + 1;      
    };
    s
  );
