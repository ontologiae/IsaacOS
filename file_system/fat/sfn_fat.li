///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name        := SFN_FAT;
  
  - bibliography:= "http://www.lisaac.org";

  - author      := 
  "Benoit Sonntag (benoit.sonntag@lisaac.org), \
  \Jerome Boutet (pisteur@free.fr)";  

  - comment     := "Short File Name of FAT";

Section Inherit
  
  - parent_object:OBJECT := OBJECT;
  
Section Mapping
  
  + name0 :CHARACTER;
  + name1 :CHARACTER;
  + name2 :CHARACTER;
  + name3 :CHARACTER;
  + name4 :CHARACTER;
  + name5 :CHARACTER;
  + name6 :CHARACTER;
  + name7 :CHARACTER;
  + name8 :CHARACTER;
  + name9 :CHARACTER;
  + name10:CHARACTER;
  
  + attr:UINTEGER_8;

  + first_char:UINTEGER_8;

  + fat_creation_time_ms:UINTEGER_8;

  + fat_creation_time:UINTEGER_16;

  + fat_creation_date:UINTEGER_16;

  + fat_access_date:UINTEGER_16;

  + high_cluster:UINTEGER_16;

  + fat_update_time:UINTEGER_16;

  + fat_update_date:UINTEGER_16;

  + cluster:UINTEGER_16;

  + map_size:UINTEGER_32;

Section Public
  
  - size:UINTEGER_32 <- map_size;
  
  - name_in result:STRING <-
  ( + name_raw:NATIVE_ARRAY(CHARACTER);
    + car:CHARACTER;
    //? {is_valid};
    
    name_raw := CONVERT(Expanded SFN_FAT,NATIVE_ARRAY(CHARACTER)).on Self;
    0.to 7 do { j:INTEGER;
      car := name_raw.item j;
      (car > ' ').if { 
        result.add_last car;
      };
    };
    result.add_last '.'; 
    8.to 10 do { j:INTEGER;
      car := name_raw.item j;
      (car > ' ').if { 
	result.add_last car;
      };
    };
    
    (result.last = '.').if {
      result.remove (result.count); // Remove '.' if last character (no extension)
    };
    
    result.to_lower; // In lower case    
  );
  
  - set_name str:ABSTRACT_STRING <-
  ( + name_raw:NATIVE_ARRAY(CHARACTER);
    + car:CHARACTER;
    + k:INTEGER;
    ? {str.count<=12};    
    
    name_raw := CONVERT(SELF,NATIVE_ARRAY(CHARACTER)).on Self;
    k:=str.lower;
    0.to 7 do { j:INTEGER;
      (k>str.upper).if {
	car := ' ';
      } else {
	car:=str.item k.to_upper;
	? {car.in_range '.' to 'Z'};
      };
      (car='.').if {
	name_raw.put ' ' to j;
      } else {
	name_raw.put car to j;
	k:=k+1;
      };
    };
    (car='.').if {
      k:=k+1;
    };
    8.to 10 do { j:INTEGER;
      (k>str.upper).if {
	car := ' ';
      } else {
	car:=str.item k.to_upper;
	? {car.in_range '.' to 'Z'};
      };      
      (car='.').if {
	name_raw.put ' ' to j;
      } else {
	name_raw.put car to j;
	k:=k+1;
      };
    };
  );
  
  - set_attr_dir <-
  (
    attr := attr | 10h;
  );
  
  - set_first_char f:UINTEGER_8 <-
  (
    first_char := f;
  );
  
  - create_time:TIME <-
  (
    time_to_isaac (fat_creation_time,fat_creation_time_ms)
  );
  
  - create_date:DATE <-
  (
    date_to_isaac fat_creation_date
  );
  
  
  - access_time:TIME <-
  (
    TIME.create (0,0,0,0)
  );
  
  - access_date:DATE <-
  (
    date_to_isaac fat_access_date
  );
  
  - update_time:TIME <-
  (
    time_to_isaac (fat_update_time,0)
  );
  
  - update_date:DATE <-
  (
    date_to_isaac fat_update_date
  );
  
  - set_create_time time:TIME <-
  (
    fat_creation_time := time_to_fat time;
    fat_creation_time_ms := 0;
  );
  
  - set_create_date date:DATE <-
  (
    fat_creation_date := date_to_fat date;
  );
  
  - set_access_time time:TIME <-
  (
  );
  
  - set_access_date date:DATE <-
  (
    fat_access_date := date_to_fat date;
  );
  
  - set_update_time time:TIME <-
  (
    fat_update_time := time_to_fat time; 
  );
  
  - set_update_date date:DATE <-
  (
    fat_update_date := date_to_fat date;
  );
  
  - set_cluster c:UINTEGER_32<-
  (
    cluster := (c & 0FFFFh).to_uinteger_16;
    high_cluster := (c >> 16).to_uinteger_16;    
  );
  
  - set_size s:UINTEGER_32<-
  (
    map_size := s;
  );
  
  - is_directory:BOOLEAN <-
  // TRUE if directory
  (
    (attr & 10h)  != 0
  );
    
  - is_label:BOOLEAN <-
  // Volume name
  (
    attr=1000b
  );
  
  - is_null:BOOLEAN <- (name0=0);
  
  - is_me:BOOLEAN <- (name0 = '.') && {name1 != '.'};
  - is_parent:BOOLEAN <- (name0 = '.') && {name1 = '.'};
    
  - is_valid:BOOLEAN <-
  // FALSE if it is the last entry of a directory
  (
    //(name0 != 00h) && {name0 != 0E5h}
    ((attr & 1000b)=0) && {name0.in_range '.' to 'Z'} 
  );
    
  - position:UINTEGER_32<-
  (
    (high_cluster.to_uinteger_32<< 16) | cluster
  );
  
  - owner_uid:UINTEGER_32:= 015AACh; 
  - owner_gid:UINTEGER_32:= 015AACh;
  
  - access_permissions:UINTEGER_32<-
  ( + result:UINTEGER_32;
    
    ((attr & 01h) != 0).if {  
      result:= 444o;
    } else {
      result:= 777o;
    };
    result
  );
    
  - print <-
  ( + tmp:STRING;
    "\nName          : ".print;
    tmp := STRING.create 20;
    name_in tmp;
    tmp.print;
    "\nAttrib        : ".print;
    attr.print;  
    "\nFirst Car     : ".print; 
    first_char.print;    
    /*
    "\nCreat Time    : ".print; 
    creation_time.print;
    "\nCreat Date    : ".print; 
    creation_date.print;
    "\nAccess Date   : ".print; 
    access_date.print;
    "\nHigh Cluster  : ".print; 
    high_cluster.print;
    "\nUpdate Time   : ".print; 
    update_time.print;
    "\nUpdate Date   : ".print; 
    update_date.print;
    */
    "\nCluster       : ".print; 
    cluster.print;
    "\nSize          : ".print; 
    size.print;
    "\n---------------\n".print;
  );

    
Section Private
  
  // HH MM SS MS
  - time_to_isaac (time:UINTEGER_16,ms:UINTEGER_8) :TIME <-
  (        
    TIME.create (((time>>11).to_uinteger_8),(((time&07E0h)>>5).to_uinteger_8),(((time&001Fh)<<1).to_uinteger_8),ms)
  );
  
  - time_to_fat time:TIME :UINTEGER_16 <-
  (
    (time.hour.to_uinteger_16 << 11)|(time.minute.to_uinteger_16 << 5)|(time.second >>1)
  );
  
  // AA AA MM JJ
  
  - date_to_isaac date:UINTEGER_16 :DATE <-
  (
    DATE.create ((((date>>9)+1980)),(((date&01E0h)>>5).to_uinteger_8),((date&001Fh).to_uinteger_8),1)
  );
  
  - date_to_fat date:DATE :UINTEGER_16 <-
  (
    (((date.year)-1980)<<9)|((date.month.to_uinteger_16)<<5)|(date.day)
  );

