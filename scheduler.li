///////////////////////////////////////////////////////////////////////////////
//                          Isaac Operating System                           //
// 									     //
//   This program is free software; you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation; version 3 of the License.  		     //
// 									     //
//   This program is distributed in the hope that it will be useful, 	     //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of 	     //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 	     //
//   GNU General Public License for more details. 			     //
// 									     //
// 			    http://www.lisaac.org			     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name      := SCHEDULER;

  - copyright := "2003-2008 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  - parent_object:OBJECT := OBJECT;
  
Section Private
  
  - task_list:FAST_ARRAY(TASK);
  
  - current_task : INTEGER;
  
Section Interrupt
    
  - interrupt_20h <-
  ( + old_stack, new_stack:POINTER;
    + old_task,new_task:TASK;
    
    old_task := task_list.item current_task;
    `asm("movl %%ebp,%0":"=m"(@old_stack))`;
    old_task.set_top_stack old_stack;    
    //
    current_task := (current_task + 1) % task_list.count;            
    //
    new_task := task_list.item current_task;
    (new_task.top_stack = 0).if {
      // Wake up.      
      // Copy from frame_stack to old_stack in new_stack.
      new_task.stack.put (CONVERT(TASK,UINTEGER_32).on new_task) to 1023;
      new_task.stack.put (`zombie`:UINTEGER_32) to 1022;
      new_task.stack.put 03202h to 1021; // Flags. (IOPL=3) & STI
      new_task.stack.put (SYSTEM.descriptor_code) to 1020;
      new_task.stack.put (`wake_up`:UINTEGER_32) to 1019;
      //new_task.stack.put (`zombie`:UINTEGER_32) to 1019;
      new_task.stack.put 015AAC05h to 1018;
      new_stack := CONVERT(NATIVE_ARRAY(UINTEGER_32),POINTER).on (new_task.stack.storage+1018);
      `asm("movl %0,%%ebp"::"m"(@new_stack))`;
    } else {      
      new_stack := new_task.top_stack;
      `asm("movl %0,%%ebp"::"m"(@new_stack))`;
    };    
    // Acknowledge.
    SYSTEM.putb 20h to 020h;        
  );
    
Section Public
  
  - add t:TASK <-
  ( + stack:FAST_ARRAY(UINTEGER_32);
    
    stack := FAST_ARRAY(UINTEGER_32).create 1024; // 4Ko.
    t.set_stack stack;
    task_list.add_last t;
    
    '\n'.print;
    SCHEDULER.task_list.count.print; 
  );
  
  - remove t:TASK <-
  (
    //task_list.remove current_task;
    //`asm("hlt")`;
    {}.loop_infinitely;
  );
      
  - make <-
  ( + stack:FAST_ARRAY(UINTEGER_32);
    + na:NATIVE_ARRAY(UINTEGER_32);
    + task:TASK;
    
    task_list := FAST_ARRAY(TASK).create_with_capacity 16;
    // Define current stack.
    na := CONVERT(INTEGER,NATIVE_ARRAY(UINTEGER_32)).on (1.mb);
    stack := FAST_ARRAY(UINTEGER_32).clone;
    stack.make_with_native_array na size (1.mb);
    // Define current stack.
    task := TASK.clone;
    task.set_stack stack;
    task_list.add_last task;
    //
    SYSTEM.new_interrupt interrupt_20h to 20h;
    SYSTEM.irq_on 0;   // Active IRQ0
  );
  
Section Private
  
  - kill th:THREAD <-
  (
    
    "End thread\n".print;
  );
